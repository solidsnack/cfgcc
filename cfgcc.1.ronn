cfgcc(1) -- compile configurations to shell scripts
===================================================

## SYNOPSIS

`cfgcc args+ > pkg.tar`                                                   <br>
`cfgcc < directives.yaml > pkg.tar`                                       <br>
`cfgcc --file directives.yaml > pkg.tar`                                  <br>

## DESCRIPTION

*cfgcc* converts a specification of a UNIX system configuration in to a
package of scripts and data to check and implement that configuration. The
specification is given as YAML, archive files and directories. Collectively,
these inputs allow specification of filesystem layout and metadata, filesystem
contents and passwd DB entries.

The input can be given in two forms, via command line options or via a batch
file. The 

The *cfgcc* command generates a tar archive as output. 

## THE GENERATED PACKAGE

The package generated by `cfgcc` consists of a driver script, supporting
scripts and a directory of filesystem entries:

    pkg/cfg.bash            --  Main script.
        fs/                 --  Filesystem contents.
        fs-contents.bash    --  Filesystem content checks.
        fs-meta.bash        --  Filesystem metadata.
        passwd.bash         --  Entries in the passwd database.

The configuration is installed by running `cfg.bash` which supports a small
number of arguments and options. (See SCRIPT SYNOPSIS.)

## SCRIPT SYNOPSIS

`cfg.bash` option? installation_root?

The installation root is `/`, by default. It may be set to another directory
to allow installation in to a chroot in the manner of debootstrap or prefix
Portage. The options determine the whether the script checks or installs the
configuration:

 *  `--check`:
    This is the default; the script checks for and reports anything in the
    installation root that must be changed to bring it in line with the
    desired configuration.

 *  `--install`:
    The configuration is applied to the installation root.

## YAML FILES

YAML files listed on the command line in order of precedence. Overlapping
directives are taken from the earliest file that specifies them.

...

## PATTERN RESOLUTION

It is possible to specify rules with patterns; but how are those patterns
resolved into concrete names? When the Bash script is built, all patterns are
resolved into names from the directories and archives given on the command
line. The Bash script contains only full filenames.

This can be tricky if you want to make changes to files not in your tarballs.
You can certainly express rules like "There are no files that match the
pattern /srv/*/*.jpg." but it is another thing to get those names resolved.

## FILE CONTENTS

Directories and archive files are 





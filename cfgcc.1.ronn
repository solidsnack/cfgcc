cfgcc(1) -- compile configurations to shell scripts
===================================================

## SYNOPSIS

`cfgcc args+ > pkg.tar`                                                   <br>
`cfgcc < batch.yaml > pkg.tar`                                            <br>
`cfgcc --file batch.yaml > pkg.tar`                                       <br>

## DESCRIPTION

*cfgcc* converts a specification of a Linux system configuration in to a
package of scripts and data to check and implement that configuration. The
specification is given as YAML, archive files and directories. Collectively,
these inputs allow specification of filesystem layout and metadata, filesystem
contents and passwd DB entries.

The input can be given in two forms, via command line options or via a batch
file. The arguments provided serve as YAML specification, name sources for
resolving patterns or sources for files contents. *cfgcc* will try to choose
which file is which intelligently when given command line arguments; to exert
programmatic control, use the batch format described in BATCH FILE.

The *cfgcc* command generates a tar archive as output.

## BATCH FILE

The batch file is a YAML file with keys *spec*, *fs/names*, *fs/contents* and
*fs/all*, indicating which files to use for specification contents, pattern
resolution and file contents. An example follows:

    spec:         - example.com_users.yaml
                  - permissions.yaml
    fs/names:     - "www0.example.com:srv-listing"
    fs/all:       - www0-apache-conf.tar
                  - www0-apache-srv/
    fs/contents:  - www0-apache-srv-1d8d4c8d/

## THE GENERATED PACKAGE

The package generated by `cfgcc` consists of a driver script, supporting
scripts and a directory of filesystem entries:

    pkg/cfg.bash            --  Driver script.
        check               --  Check shim for driver script.
        fs/contents/        --  Filesystem contents.
           contents.bash    --  Filesystem content checks and setup.
           meta.bash        --  Filesystem metadata checks and setup
        install             --  Installation shim for driver script.
        passwd.bash         --  Entries in the passwd database.

The driver script can check or install the configuration, treating `/` or
another directory as the installation root, per command line arguments as
described in DRIVER SCRIPT SYNOPSIS.

## SCRIPT SYNOPSIS

`/path/to/pkg/check installation_root?`
`/path/to/pkg/install installation_root?`
`/path/to/pkg/cfg.bash action installation_root?`

The nice way to call the script is through the symlinks; but it also accepts
explicit specification of the action to perform. The actions are:

 *  `check`:
    The script checks for and reports anything in the installation root that
    must be changed to bring it in line with the desired configuration.

 *  `install`:
    The configuration is applied to the installation root.

The file installation root is `/` by default. It may be set at the command
line to any other directory, supporting installation into different "prefixes"
in the manner of prefix Portage. Note well that this does not insulate the
root filesystem from all possible changes -- users and groups will still be
added to the system's passwd database.

## YAML FILES

YAML files listed on the command line in order of precedence. Overlapping
directives are taken from the earliest file that specifies them.

Directives are...

## PATTERN RESOLUTION

Filesystem rules that specify globs and regexen as targets are manifestly
useful; but they open the question of how to get the right nameset.

Names are drawn from contexts...

## FILE CONTENTS

Directories and archives are used in the order given, those before taking
precedence over those following, to arrive at the file contents shipped with
the archive.

